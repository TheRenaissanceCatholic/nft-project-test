{
  "language": "Solidity",
  "sources": {
    "NFTLand.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.24;\n\nimport "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol";\nimport "@openzeppelin/contracts/access/Ownable.sol";\nimport "@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol";\n\ncontract NFTLand is ERC721Enumerable, Ownable {\n    uint256 public constant MAX_SUPPLY = 777;\n    uint256 public constant RESERVED = 3;\n    uint256 public totalMinted;\n    uint256 public reservedMinted;\n    string private baseTokenURI;\n    AggregatorV3Interface internal priceFeed;\n    uint256 public constant USD_PRICE = 1000 * 1e18; // $1000, 18 decimals for USD\n\n    constructor(string memory _baseTokenURI, address _priceFeed) ERC721(\"NFT Land Access\", \"LANDNFT\") {\n        baseTokenURI = _baseTokenURI;\n        priceFeed = AggregatorV3Interface(_priceFeed);\n    }\n\n    // Mint for the public\n    function mint() external payable {\n        require(totalSupply() < MAX_SUPPLY - RESERVED + reservedMinted, \"Sold out\");\n        uint256 ethPrice = getLatestETHPrice();\n        uint256 requiredETH = (USD_PRICE * 1e18) / ethPrice;\n        require(msg.value >= requiredETH, \"Insufficient ETH sent\");\n        totalMinted++;\n        _safeMint(msg.sender, totalSupply() + 1);\n    }\n\n    // Reserved mint for owner/team\n    function reserveMint(address to) external onlyOwner {\n        require(reservedMinted < RESERVED, \"All reserved minted\");\n        reservedMinted++;\n        _safeMint(to, totalSupply() + 1);\n    }\n\n    // Chainlink price feed for ETH/USD\n    function getLatestETHPrice() public view returns (uint256) {\n        (, int price, , , ) = priceFeed.latestRoundData();\n        require(price > 0, \"Invalid price\");\n        return uint256(price); // 8 decimals\n    }\n\n    // Set base URI (for metadata)\n    function setBaseURI(string memory _baseTokenURI) external onlyOwner {\n        baseTokenURI = _baseTokenURI;\n    }\n\n    function _baseURI() internal view override returns (string memory) {\n        return baseTokenURI;\n    }\n}"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "metadata", "evm.bytecode", "evm.bytecode.sourceMap"
        ]
      }
    },
    "remappings": [
      "@openzeppelin/=node_modules/@openzeppelin/",
      "@chainlink/=node_modules/@chainlink/"
    ]
  }
}